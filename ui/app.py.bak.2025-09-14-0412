from nicegui import ui
import json, yaml, sys
from pathlib import Path

sys.path.append(str(Path(__file__).resolve().parent))
from pipeline import env_info, preview_mundane, preview_medium, preview_long, preview_lunar, push, tail_log, snapshot
from zet_index import scan_dir, load_cache, set_active_record

ASTRO = Path.home() / 'astro'
CONFIG_PATH = ASTRO / 'config.yaml'
CONF_RU_PATH = ASTRO / 'data' / 'configs' / 'configs_ru.yaml'

# == UI theme prefs ==
PREFS = ASTRO / '.state' / 'ui_prefs.json'
PREFS.parent.mkdir(parents=True, exist_ok=True)
prefs = {'dark': False}
try:
    if PREFS.exists():
        prefs.update(json.loads(PREFS.read_text(encoding='utf-8')))
except Exception:
    pass
dark = ui.dark_mode()
if prefs.get('dark'):
    dark.enable()
else:
    dark.disable()
# == end theme prefs ==

with ui.header().classes('items-center'):
    ui.label('GeoDAC — Control Panel').classes('text-h6')
    ui.space()
    def _toggle_dark():
        cur = bool(getattr(dark, 'value', False))
        if cur:
            dark.disable()
        else:
            dark.enable()
        new = not cur
        try:
            PREFS.write_text(json.dumps({'dark': new}, ensure_ascii=False, indent=2), encoding='utf-8')
        except Exception:
            pass
        btn.text = 'Тема: Тёмная' if new else 'Тема: Светлая'
    btn = ui.button('Тема: ' + ('Тёмная' if getattr(dark,'value',False) else 'Светлая'), on_click=_toggle_dark)
    ui.separator().props('vertical').classes('mx-2')
    ui.label('local UI')

with ui.tabs().classes('w-full') as tabs:
    t_dash = ui.tab('Сводка')
    t_mund = ui.tab('Mundane')
    t_pers = ui.tab('Personal')
    t_luna = ui.tab('Lunar')
    t_conf = ui.tab('Config')
    t_zet  = ui.tab('ZET DBase')
    t_logs = ui.tab('Логи')

with ui.tab_panels(tabs, value=t_dash).classes('w-full'):
    # Сводка
    with ui.tab_panel(t_dash):
        with ui.card().classes('w-full'):
            ui.label('Окружение').classes('text-subtitle1')
            info = env_info()
            ui.markdown(f"- TZ: {info.get('TZ')}\n- EPHE: {info.get('EPHE')}\n- Natal frame: {'OK' if info.get('cusps_ok') else 'missing'}")
            ui.button('Snapshot (git)', on_click=lambda: ui.notify(snapshot() or 'Done', close_button='OK'))

    # Mundane
    with ui.tab_panel(t_mund):
        with ui.card().classes('w-full'):
            ui.label('Mundane: предпросмотр и пуш').classes('text-subtitle1')
            with ui.row():
                from_date = ui.input('From', value='2025-02-25')
                to_date   = ui.input('To',   value='2026-04-01')
                orb  = ui.input('ORB',    value='2').props('type=number')
                step = ui.input('STEP_H', value='12').props('type=number')
            area = ui.textarea().props('rows=12').classes('w-full')
            ui.button('Preview', on_click=lambda: area.set_value(
                json.dumps(preview_mundane(from_date.value, to_date.value, orb.value, step.value), ensure_ascii=False, indent=2)
            )).props('color=primary')
            ui.button('Push (replace)', on_click=lambda: area.set_value(
                push('mundane', min_events=100, orb=orb.value, step_h=step.value)
            )).props('color=negative')

    # Personal (Medium / Long)
    with ui.tab_panel(t_pers):
        with ui.card().classes('w-full'):
            ui.label('Personal: Medium / Long').classes('text-subtitle1')
            out2 = ui.textarea().props('rows=12').classes('w-full')
            with ui.row():
                ui.button('Preview Medium', on_click=lambda: out2.set_value(json.dumps(preview_medium(), ensure_ascii=False, indent=2))).props('color=primary')
                ui.button('Preview Long',   on_click=lambda: out2.set_value(json.dumps(preview_long(),   ensure_ascii=False, indent=2))).props('color=primary')
            with ui.row():
                ui.button('Push Medium', on_click=lambda: out2.set_value(push('medium', min_events=40))).props('color=negative')
                ui.button('Push Long',   on_click=lambda: out2.set_value(push('long',   min_events=10))).props('color=negative')
            # progress bars for Medium/Long
            prog_m = ui.linear_progress(value=0).classes('w-full mt-2')
            stage_m = ui.label('')
            prog_l = ui.linear_progress(value=0).classes('w-full mt-2')
            stage_l = ui.label('')
            def start_prog_m():
                start_push_progress('medium', min_events=40)
                def poll():
                    st=read_push_status_layer('medium'); pct=max(0,min(100,int(st.get('percent',0))))
                    prog_m.value=pct/100.0; stage_m.text=f"{pct}% — {st.get('stage','…')}"
                    if pct>=100: tm.active=False
                tm=ui.timer(1.0, poll, active=True)
            def start_prog_l():
                start_push_progress('long', min_events=10)
                def poll():
                    st=read_push_status_layer('long'); pct=max(0,min(100,int(st.get('percent',0))))
                    prog_l.value=pct/100.0; stage_l.text=f"{pct}% — {st.get('stage','…')}"
                    if pct>=100: tl.active=False
                tl=ui.timer(1.0, poll, active=True)
            with ui.row():
                ui.button('Push Medium (progress)', on_click=start_prog_m).props('color=primary')
                ui.button('Push Long (progress)',   on_click=start_prog_l).props('color=primary')

    # Lunar
    with ui.tab_panel(t_luna):
        with ui.card().classes('w-full'):
            ui.label('Lunar Natal').classes('text-subtitle1')
            out3 = ui.textarea().props('rows=12').classes('w-full')
            ui.button('Preview Lunar', on_click=lambda: out3.set_value(json.dumps(preview_lunar(), ensure_ascii=False, indent=2))).props('color=primary')
            ui.button('Push Lunar',    on_click=lambda: out3.set_value(push('lunar', min_events=10))).props('color=negative')
            prog_ln = ui.linear_progress(value=0).classes('w-full mt-2')
            stage_ln = ui.label('')
            def start_prog_ln():
                start_push_progress('lunar', min_events=10)
                def poll():
                    st=read_push_status_layer('lunar'); pct=max(0,min(100,int(st.get('percent',0))))
                    prog_ln.value=pct/100.0; stage_ln.text=f"{pct}% — {st.get('stage','…')}"
                    if pct>=100: tl.active=False
                tl=ui.timer(1.0, poll, active=True)
            ui.button('Push Lunar (progress)', on_click=start_prog_ln).props('color=primary')

    # Config
    with ui.tab_panel(t_conf):
        with ui.card().classes('w-full'):
            ui.label('config.yaml').classes('text-subtitle1')
            cfg_area = ui.textarea(value=(CONFIG_PATH.read_text(encoding='utf-8') if CONFIG_PATH.exists() else '')).props('rows=14').classes('w-full')
            def save_cfg():
                try:
                    yaml.safe_load(cfg_area.value)
                except Exception as e:
                    ui.notify(f"YAML error: {e}", color='negative'); return
                CONFIG_PATH.write_text(cfg_area.value, encoding='utf-8'); ui.notify('config.yaml сохранён')
            ui.button('Сохранить config.yaml', on_click=save_cfg).props('color=primary')

        with ui.card().classes('w-full'):
            ui.label('configs_ru.yaml').classes('text-subtitle1')
            cr_path = CONF_RU_PATH; cr_path.parent.mkdir(parents=True, exist_ok=True)
            cr_area = ui.textarea(value=(cr_path.read_text(encoding='utf-8') if cr_path.exists() else '')).props('rows=14').classes('w-full')
            def save_conf_ru():
                try:
                    yaml.safe_load(cr_area.value)
                except Exception as e:
                    ui.notify(f"YAML error: {e}", color='negative'); return
                cr_path.write_text(cr_area.value, encoding='utf-8'); ui.notify('configs_ru.yaml сохранён')
            ui.button('Сохранить configs_ru.yaml', on_click=save_conf_ru).props('color=primary')

    # ZET DBase (read-only)
    with ui.tab_panel(t_zet):
        with ui.card().classes('w-full'):
            ui.label('ZET DBase (read-only)').classes('text-subtitle1')
            path = ui.input('Путь к базе ZET', value='/home/DAC/Zet9 GeoDAC/DBase/').classes('w-1/2')
            patt = ui.input('Шаблон', value='*.zbs').classes('w-1/6')
            recursive = ui.checkbox('Рекурсивно', value=False)
            folder_filter = ui.input('Фильтр по папке', value='').classes('w-1/3')
            info = ui.label('')

            cols = [
                {'name':'id','label':'ID','field':'id','sortable':True},
                {'name':'name','label':'Имя','field':'name','sortable':True},
                {'name':'date','label':'Дата','field':'date','sortable':True},
                {'name':'time','label':'Время','field':'time'},
                {'name':'tz','label':'TZ','field':'tz'},
                {'name':'lat','label':'Lat','field':'lat'},
                {'name':'lon','label':'Lon','field':'lon'},
                {'name':'hsys','label':'H','field':'hsys'},
                {'name':'place','label':'Место','field':'place'},
                {'name':'folder','label':'Папка','field':'folder','sortable':True},
                {'name':'tags','label':'Теги','field':'tags'},
            ]
            zet_table = ui.table(columns=cols, rows=[], row_key='id', selection='single', pagination=10).classes('w-full')

            state = {'all': [], 'shown': [], 'selected': None}

            def on_select(e):
                sel = (e.args or {}).get('rows', [])
                state['selected'] = sel[0] if sel else None
            zet_table.on('selection', on_select)

            with ui.row():
                ui.button('Пересканировать', on_click=lambda: do_scan()).props('color=primary')
                ui.button('Применить фильтр', on_click=lambda: apply_filter()).props('color=secondary')
                ui.button('Сделать активным', on_click=lambda: do_set_active()).props('color=secondary')

            def render_table():
                zet_table.rows = state['shown'][:800]
                zet_table.update()

            def apply_filter():
                ff = (folder_filter.value or '').strip().lower()
                if ff:
                    rows = [r for r in state['all'] if ff in (r.get('folder','').lower())]
                else:
                    rows = state['all']
                state['shown'] = rows
                render_table()

            def do_scan():
                recs = scan_dir(path.value, patt.value or '*.zbs', save_cache=True, recursive=recursive.value)
                info.text = f"Найдено записей: {len(recs)}"
                state['all'] = recs
                apply_filter()

            def do_set_active():
                r = state['selected']
                if not r:
                    ui.notify('Не выбрана запись', color='warning'); return
                ui.notify(set_active_record(r))

            cache = load_cache()
            if cache.get('records'):
                state['all'] = cache['records']
                info.text = f"Кэш: {len(cache['records'])} записей из {cache.get('root','')}"
            else:
                info.text = "Кэш не найден. Нажмите «Пересканировать»."
            state['shown'] = state['all']
            render_table()

    # Логи
    with ui.tab_panel(t_logs):
        with ui.card().classes('w-full'):
            ui.label('Логи').classes('text-subtitle1')
            sel = ui.select(['mundane','medium','long','lunar'], value='mundane', label='Log')
            ta  = ui.textarea().props('rows=18').classes('w-full')
            ui.button('Refresh', on_click=lambda: ta.set_value(tail_log(sel.value, 300)))

ui.run(host='127.0.0.1', port=8080, title='GeoDAC Control', reload=False)
